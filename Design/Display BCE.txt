title Display BCE

actor Staff
boundary StaffUI
control ManagementSystem
participant Cinema
participant ScreeningMapper
participant ScreenMapper
participant MovieMapper
database db
entity PersistentScreening
Staff->StaffUI:submit(date : LocalDate)
activate StaffUI
StaffUI->ManagementSystem:setDate(date : LocalDate)
activate ManagementSystem

ManagementSystem->Cinema:getScreenings(date : LocalDate)
activate Cinema

Cinema->ScreeningMapper:getScreenings(date : LocalDate)
activate ScreeningMapper
ScreeningMapper->db:executeQuery(sql : String)

loop for every row returned for Screenings
ScreeningMapper->ScreenMapper:s := getScreenforOid(screen : Integer)
ScreeningMapper->MovieMapper:m := getMovieForOid(movie : Integer)
ScreeningMapper->*PersistentScreening:PersistentScreening(oid : Integer, date : LocalDate, \nstart_time : LocalTime, s : Screen, m : Movie, ticket_sold : Integer)
activate PersistentScreening
PersistentScreening-->ScreeningMapper:
deactivate PersistentScreening
end


ScreeningMapper-->Cinema:return Screenings
deactivate ScreeningMapper


Cinema-->ManagementSystem:return Screenings
deactivate Cinema

ManagementSystem->ManagementSystem:notifyObservers()
activate ManagementSystem

ManagementSystem->StaffUI:update()
activate StaffUI
StaffUI->ManagementSystem:getDate()
activate ManagementSystem
ManagementSystem-->StaffUI:return date
deactivate ManagementSystem

StaffUI->ManagementSystem:getScreenings()
activate ManagementSystem
ManagementSystem-->StaffUI:return Screenings
deactivate ManagementSystem

StaffUI-->ManagementSystem:
deactivate StaffUI

ManagementSystem-->ManagementSystem:
deactivate ManagementSystem
ManagementSystem-->StaffUI:
deactivate ManagementSystem
StaffUI-->Staff:
deactivate StaffUI